/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building an application
    id 'application'
    id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}


configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		exclude group: 'ch.qos.logback'
	}

	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
     mavenCentral()
     jcenter()
}

// tag::dependencies[]
dependencies {
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.10'

    compile group: 'com.marklogic', name: 'marklogic-client-api', version: '4.2.0'
    compile group: 'com.marklogic', name: 'marklogic-data-hub', version: '5.2.0'
	compile "com.marklogic:ml-javaclient-util:3.13.3"

   	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:27.0.1-jre'

    // Use JUnit test framework
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

// tag::jar[]
jar {
    baseName = 'alstom-scheduler'
    version =  '0.1.0'
    manifest {
        attributes('Main-Class': 'com.marklogic.scheduler.SchedulerApplication')
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
         }
    }

  // You can reference any part of the dependency configurations,
  // and you can have as many from statements as you need
  from configurations.compile  
  // I just copied them into the top of the jar, so it looks like the eclipse exported 
  // runnable jar, but you could designate a lib directory, and reference that in the 
  // classpath as "lib/$it.name" instead of it.getName()
  into ''   

}
// end::jar[]



sourceCompatibility = 1.8
targetCompatibility = 1.8




// Define the main class for the application
mainClassName = 'com.marklogic.scheduler.SchedulerApplication'
